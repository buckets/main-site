/* Generated by Nim Compiler v0.19.9 */
/*   (c) 2018 Andreas Rumpf */
/* The generated code is subject to the original license. */
#define NIM_NEW_MANGLING_RULES
#define NIM_INTBITS 64

#include "nimbase.h"
#include <string.h>
#include <new>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct NimStringDesc;
struct TGenericSeq;
struct tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw;
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA;
struct Exception;
struct RootObj;
struct TNimType;
struct TNimNode;
struct tySequence_uB9b75OUPRENsBAu4AnoePA;
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA;
struct TGenericSeq {
NI len;
NI reserved;
};
struct NimStringDesc : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef NU8 tySet_tyChar_nmiMWKVIe46vacnhAFrQvw[32];
typedef NU8 tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A;
typedef NU8 tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ;
typedef N_NIMCALL_PTR(void, tyProc_ojoeKfW4VYIm36I9cpDTQIg) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ) (void* p);
struct TNimType {
NI size;
tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A kind;
tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ flags;
TNimType* base;
TNimNode* node;
void* finalizer;
tyProc_ojoeKfW4VYIm36I9cpDTQIg marker;
tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ deepcopy;
};
struct RootObj {
TNimType* m_type;
};
N_NIMCALL(void, popCurrentExceptionEx)(NU id);
struct Exception : public RootObj {
virtual void raise() {throw *this;}
~Exception() {if(this->raiseId) popCurrentExceptionEx(this->raiseId);}
Exception* parent;
NCSTRING name;
NimStringDesc* message;
tySequence_uB9b75OUPRENsBAu4AnoePA* trace;
NU raiseId;
Exception* up;
};
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA : public Exception {
virtual void raise() {throw *this;}
};
struct tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw : public tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA {
virtual void raise() {throw *this;}
};
typedef NU8 tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ;
struct TNimNode {
tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA {
NCSTRING procname;
NI line;
NCSTRING filename;
};
struct tySequence_uB9b75OUPRENsBAu4AnoePA : TGenericSeq {
  tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA data[SEQ_DECL_SIZE];
};
static N_INLINE(NI, addInt)(NI a, NI b);
N_NOINLINE(void, raiseOverflow)(void);
static N_INLINE(NI, chckRange)(NI i, NI a, NI b);
N_NOINLINE(void, raiseRangeError)(NI64 val);
static N_INLINE(void, nimFrame)(TFrame* s);
N_LIB_PRIVATE N_NOINLINE(void, callDepthLimitReached_II46IjNZztN9bmbxUD8dt8g)(void);
static N_INLINE(void, popFrame)(void);
N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x);
static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c);
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src);
static N_INLINE(void, copyMem_E1xtACub5WcDa3vbrIXbwgsystem)(void* dest, void* source, NI size);
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size);
N_NIMCALL(NimStringDesc*, rawNewString)(NI space);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(void, memTrackerWrite)(void* address, NI size, NCSTRING file, NI line);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src);
N_LIB_PRIVATE N_NIMCALL(NI, nsuFindCharSet)(NimStringDesc* s, tySet_tyChar_nmiMWKVIe46vacnhAFrQvw chars, NI start, NI last);
N_LIB_PRIVATE N_NIMCALL(NI, npuParseBiggestInt)(NimStringDesc* s, NI64& number, NI start);
N_NIMCALL(void, popCurrentExceptionEx)(NU id);
N_NIMCALL(void*, newObj)(TNimType* typ, NI size);
N_NIMCALL(void, raiseExceptionEx)(Exception* e, NCSTRING ename, NCSTRING procname, NCSTRING filename, NI line);
N_LIB_PRIVATE N_NIMCALL(NI, npuParseFloat)(NimStringDesc* s, NF& number, NI start);
N_NIMCALL(NimStringDesc*, rawNewString)(NI cap);
N_LIB_PRIVATE N_NIMCALL(void, nsuAddf)(NimStringDesc*& s, NimStringDesc* formatstr, NimStringDesc** a, NI aLen_0);
N_LIB_PRIVATE N_NOINLINE(void, invalidFormatString_61EJWW6vRISEo9a8gt0tusw)(void);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen);
N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s, NIM_CHAR c);
N_LIB_PRIVATE N_NIMCALL(NI, findNormalized_SW1VCMDsxPTtzxnYrf3N6w)(NimStringDesc* x, NimStringDesc** inArray, NI inArrayLen_0);
N_LIB_PRIVATE N_NIMCALL(NI, nsuCmpIgnoreStyle)(NimStringDesc* a, NimStringDesc* b);
N_LIB_PRIVATE N_NIMCALL(NIM_CHAR, nsuToLowerAsciiChar)(NIM_CHAR c);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, substr_TWXUwbnq0SWWvDLfr8LXYw)(NimStringDesc* s, NI first, NI last);
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TNimType NTI_Ie1m0dv1ZHg72IgPRr1cDw_;
extern TNimType NTI_yoNlBGx0D2tRizIdhQuENw_;
STRING_LITERAL(TM_JGc9b9bh2D3nTdUR7TGyq8aA_3, "invalid integer: ", 17);
STRING_LITERAL(TM_JGc9b9bh2D3nTdUR7TGyq8aA_4, "invalid float: ", 15);
STRING_LITERAL(TM_JGc9b9bh2D3nTdUR7TGyq8aA_5, "invalid format string", 21);

static N_INLINE(NI, addInt)(NI a, NI b) {
	NI result;
{	result = (NI)0;
	result = (NI)((NU64)(a) + (NU64)(b));
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI) 0) <= (NI)(result ^ a));
		if (T3_) goto LA4_;
		T3_ = (((NI) 0) <= (NI)(result ^ b));
		LA4_: ;
		if (!T3_) goto LA5_;
{		goto BeforeRet_;
}	}
	LA5_: ;
	raiseOverflow();
	}BeforeRet_: ;
	return result;
}

static N_INLINE(NI, chckRange)(NI i, NI a, NI b) {
	NI result;
{	result = (NI)0;
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (a <= i);
		if (!(T3_)) goto LA4_;
		T3_ = (i <= b);
		LA4_: ;
		if (!T3_) goto LA5_;
{		result = i;
		goto BeforeRet_;
}	}
	goto LA1_;
	LA5_: ;
	{
		raiseRangeError(((NI64) (i)));
	}
	LA1_: ;
	}BeforeRet_: ;
	return result;
}

static N_INLINE(void, nimFrame)(TFrame* s) {
	NI T1_;
	T1_ = (NI)0;
	{
		if (!(framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw == NIM_NIL)) goto LA4_;
{		T1_ = ((NI) 0);
}	}
	goto LA2_;
	LA4_: ;
	{
		T1_ = ((NI) ((NI16)((*framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw).calldepth + ((NI16) 1))));
	}
	LA2_: ;
	(*s).calldepth = ((NI16) (T1_));
	(*s).prev = framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
	framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw = s;
	{
		if (!((*s).calldepth == ((NI16) (((NI) 2000))))) goto LA9_;
{		callDepthLimitReached_II46IjNZztN9bmbxUD8dt8g();
}	}
	LA9_: ;
}

static N_INLINE(void, popFrame)(void) {
	framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw = (*framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw).prev;
}

N_LIB_PRIVATE N_NIMCALL(NIM_CHAR, nsuToLowerAsciiChar)(NIM_CHAR c) {
	NIM_CHAR result;
	nimfr_("toLowerAscii", "strutils.nim");
	result = (NIM_CHAR)0;
	nimln_(264, "strutils.nim");
	{
		NI TM_JGc9b9bh2D3nTdUR7TGyq8aA_2;
		if (!(((NU8)(c)) >= ((NU8)(65)) && ((NU8)(c)) <= ((NU8)(90)))) goto LA3_;
{		nimln_(265, "strutils.nim");
		TM_JGc9b9bh2D3nTdUR7TGyq8aA_2 = addInt(((NU8)(c)), ((NI) 32));
		result = ((NIM_CHAR) (((NI)chckRange((NI)(TM_JGc9b9bh2D3nTdUR7TGyq8aA_2), ((NI) 0), ((NI) 255)))));
}	}
	goto LA1_;
	LA3_: ;
	{
		nimln_(267, "strutils.nim");
		result = c;
	}
	LA1_: ;
	popFrame();
	return result;
}

static N_INLINE(void, appendChar)(NimStringDesc* dest, NIM_CHAR c) {
	(*dest).data[(*dest).len] = c;
	(*dest).data[(NI)((*dest).len + ((NI) 1))] = 0;
	(*dest).len += ((NI) 1);
}

static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size) {
	void* T1_;
	T1_ = (void*)0;
	T1_ = memcpy(dest, source, ((size_t) (size)));
}

static N_INLINE(void, copyMem_E1xtACub5WcDa3vbrIXbwgsystem)(void* dest, void* source, NI size) {
	nimCopyMem(dest, source, size);
}

static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src) {
	{
		if (!!((src == NIM_NIL))) goto LA3_;
{		copyMem_E1xtACub5WcDa3vbrIXbwgsystem(((void*) ((&(*dest).data[(*dest).len]))), ((void*) ((*src).data)), ((NI) ((NI)((*src).len + ((NI) 1)))));
		(*dest).len += (*src).len;
}	}
	LA3_: ;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nsuIntToStr)(NI x, NI minchars) {
	NimStringDesc* result;
	nimfr_("intToStr", "strutils.nim");
	result = (NimStringDesc*)0;
	result = nimIntToStr((x > 0? (x) : -(x)));
	{
		NI i;
		NI colontmp_;
		i = (NI)0;
		colontmp_ = (NI)0;
		colontmp_ = (NI)(((NI) (minchars)) - (result ? result->len : 0));
		NI res = ((NI) 1);
		{
			while (1) {
				NimStringDesc* T4_;
				if (!(res <= colontmp_)) goto LA3;
				i = res;
				T4_ = (NimStringDesc*)0;
				T4_ = rawNewString((result ? result->len : 0) + 1);
appendChar(T4_, 48);
appendString(T4_, result);
				result = T4_;
				res += ((NI) 1);
			} LA3: ;
		}
	}
	{
		NimStringDesc* T9_;
		if (!(x < ((NI) 0))) goto LA7_;
{		T9_ = (NimStringDesc*)0;
		T9_ = rawNewString((result ? result->len : 0) + 1);
appendChar(T9_, 45);
appendString(T9_, result);
		result = T9_;
}	}
	LA7_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nsuAlignString)(NimStringDesc* s, NI count, NIM_CHAR padding) {
	NimStringDesc* result;
	nimfr_("align", "strutils.nim");
	result = (NimStringDesc*)0;
	{
		if (!((s ? s->len : 0) < ((NI) (count)))) goto LA3_;
{		result = mnewString(count);
		NI spaces = (NI)(((NI) (count)) - (s ? s->len : 0));
		{
			NI i;
			NI colontmp_;
			i = (NI)0;
			colontmp_ = (NI)0;
			colontmp_ = (NI)(spaces - ((NI) 1));
			NI res = ((NI) 0);
			{
				while (1) {
					if (!(res <= colontmp_)) goto LA7;
					i = res;
					result->data[i] = padding;
					memTrackerWrite((void*)(&result->data[i]), 1, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 1149);
					res += ((NI) 1);
				} LA7: ;
			}
		}
		{
			NI i_2;
			NI colontmp__2;
			i_2 = (NI)0;
			colontmp__2 = (NI)0;
			colontmp__2 = (NI)(((NI) (count)) - ((NI) 1));
			NI res_2 = spaces;
			{
				while (1) {
					if (!(res_2 <= colontmp__2)) goto LA10;
					i_2 = res_2;
					result->data[i_2] = s->data[(NI)(i_2 - spaces)];
					memTrackerWrite((void*)(&result->data[i_2]), 1, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 1150);
					res_2 += ((NI) 1);
				} LA10: ;
			}
		}
}	}
	goto LA1_;
	LA3_: ;
	{
		result = copyString(s);
	}
	LA1_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NI, nsuFindCharSet)(NimStringDesc* s, tySet_tyChar_nmiMWKVIe46vacnhAFrQvw chars, NI start, NI last) {
	NI result;
	NI T1_;
	nimfr_("find", "strutils.nim");
{	result = (NI)0;
	T1_ = (NI)0;
	{
		if (!(last == ((NI) 0))) goto LA4_;
{		T1_ = ((s ? s->len : 0)-1);
}	}
	goto LA2_;
	LA4_: ;
	{
		T1_ = last;
	}
	LA2_: ;
	NI last_2 = T1_;
	{
		NI i;
		NI colontmp_;
		i = (NI)0;
		colontmp_ = (NI)0;
		colontmp_ = ((NI) (start));
		NI res = colontmp_;
		{
			while (1) {
				if (!(res <= last_2)) goto LA9;
				i = res;
				{
					if (!((chars[(NU)(((NU8)(s->data[i])))>>3] &(1U<<((NU)(((NU8)(s->data[i])))&7U)))!=0)) goto LA12_;
{					result = i;
					goto BeforeRet_;
}				}
				LA12_: ;
				res += ((NI) 1);
			} LA9: ;
		}
	}
	result = ((NI) -1);
	goto BeforeRet_;
	}BeforeRet_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, contains_m1TSS3QwQPclQATuiRuVZg)(NimStringDesc* s, tySet_tyChar_nmiMWKVIe46vacnhAFrQvw chars) {
	NIM_BOOL result;
	NI T1_;
	nimfr_("contains", "strutils.nim");
{	result = (NIM_BOOL)0;
	T1_ = (NI)0;
	T1_ = nsuFindCharSet(s, chars, ((NI) 0), ((NI) 0));
	result = (((NI) 0) <= T1_);
	goto BeforeRet_;
	}BeforeRet_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NI64, nsuParseBiggestInt)(NimStringDesc* s) {
	NI64 result;
	nimfr_("parseBiggestInt", "strutils.nim");
	result = (NI64)0;
	NI L = npuParseBiggestInt(s, result, ((NI) 0));
	{
		NIM_BOOL T3_;
		tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw* e;
		NimStringDesc* T7_;
		T3_ = (NIM_BOOL)0;
		T3_ = !((L == (s ? s->len : 0)));
		if (T3_) goto LA4_;
		T3_ = (L == ((NI) 0));
		LA4_: ;
		if (!T3_) goto LA5_;
{		e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*)0;
		e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*) newObj((&NTI_Ie1m0dv1ZHg72IgPRr1cDw_), sizeof(tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw));
		new (e) tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw;
		(*e).m_type = (&NTI_yoNlBGx0D2tRizIdhQuENw_);
		T7_ = (NimStringDesc*)0;
		T7_ = rawNewString((s ? s->len : 0) + 17);
appendString(T7_, ((NimStringDesc*) &TM_JGc9b9bh2D3nTdUR7TGyq8aA_3));
appendString(T7_, s);
		(*e).message = T7_;
		memTrackerWrite((void*)(&(*e).message), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 961);
		(*e).parent = NIM_NIL;
		memTrackerWrite((void*)(&(*e).parent), 8, "/Users/matt/lib/Nim/lib/system.nim", 2984);
		raiseExceptionEx((Exception*)e, "ValueError", "parseBiggestInt", "../../../../../lib/Nim/lib/pure/strutils.nim", 961);
}	}
	LA5_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NF, nsuParseFloat)(NimStringDesc* s) {
	NF result;
	nimfr_("parseFloat", "strutils.nim");
	result = (NF)0;
	NI L = npuParseFloat(s, result, ((NI) 0));
	{
		NIM_BOOL T3_;
		tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw* e;
		NimStringDesc* T7_;
		T3_ = (NIM_BOOL)0;
		T3_ = !((L == (s ? s->len : 0)));
		if (T3_) goto LA4_;
		T3_ = (L == ((NI) 0));
		LA4_: ;
		if (!T3_) goto LA5_;
{		e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*)0;
		e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*) newObj((&NTI_Ie1m0dv1ZHg72IgPRr1cDw_), sizeof(tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw));
		new (e) tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw;
		(*e).m_type = (&NTI_yoNlBGx0D2tRizIdhQuENw_);
		T7_ = (NimStringDesc*)0;
		T7_ = rawNewString((s ? s->len : 0) + 15);
appendString(T7_, ((NimStringDesc*) &TM_JGc9b9bh2D3nTdUR7TGyq8aA_4));
appendString(T7_, s);
		(*e).message = T7_;
		memTrackerWrite((void*)(&(*e).message), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 991);
		(*e).parent = NIM_NIL;
		memTrackerWrite((void*)(&(*e).parent), 8, "/Users/matt/lib/Nim/lib/system.nim", 2984);
		raiseExceptionEx((Exception*)e, "ValueError", "parseFloat", "../../../../../lib/Nim/lib/pure/strutils.nim", 991);
}	}
	LA5_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NOINLINE(void, invalidFormatString_61EJWW6vRISEo9a8gt0tusw)(void) {
	tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw* e;
	nimfr_("invalidFormatString", "strutils.nim");
	e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*)0;
	e = (tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw*) newObj((&NTI_Ie1m0dv1ZHg72IgPRr1cDw_), sizeof(tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw));
	new (e) tyObject_ValueError_yoNlBGx0D2tRizIdhQuENw;
	(*e).m_type = (&NTI_yoNlBGx0D2tRizIdhQuENw_);
	(*e).message = copyString(((NimStringDesc*) &TM_JGc9b9bh2D3nTdUR7TGyq8aA_5));
	memTrackerWrite((void*)(&(*e).message), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2298);
	(*e).parent = NIM_NIL;
	memTrackerWrite((void*)(&(*e).parent), 8, "/Users/matt/lib/Nim/lib/system.nim", 2984);
	raiseExceptionEx((Exception*)e, "ValueError", "invalidFormatString", "../../../../../lib/Nim/lib/pure/strutils.nim", 2298);
	popFrame();
}

N_LIB_PRIVATE N_NIMCALL(NI, nsuCmpIgnoreStyle)(NimStringDesc* a, NimStringDesc* b) {
	NI result;
	nimfr_("cmpIgnoreStyle", "strutils.nim");
{	result = (NI)0;
	NI i = ((NI) 0);
	NI j = ((NI) 0);
	{
		while (1) {
			NIM_CHAR T11_;
			NIM_CHAR T17_;
			{
				while (1) {
					NIM_BOOL T5_;
					T5_ = (NIM_BOOL)0;
					T5_ = (i < (a ? a->len : 0));
					if (!(T5_)) goto LA6_;
					T5_ = ((NU8)(a->data[i]) == (NU8)(95));
					LA6_: ;
					if (!T5_) goto LA4;
					i += ((NI) 1);
				} LA4: ;
			}
			{
				while (1) {
					NIM_BOOL T9_;
					T9_ = (NIM_BOOL)0;
					T9_ = (j < (b ? b->len : 0));
					if (!(T9_)) goto LA10_;
					T9_ = ((NU8)(b->data[j]) == (NU8)(95));
					LA10_: ;
					if (!T9_) goto LA8;
					j += ((NI) 1);
				} LA8: ;
			}
			T11_ = (NIM_CHAR)0;
			{
				if (!(i < (a ? a->len : 0))) goto LA14_;
{				T11_ = nsuToLowerAsciiChar(a->data[i]);
}			}
			goto LA12_;
			LA14_: ;
			{
				T11_ = 0;
			}
			LA12_: ;
			NIM_CHAR aa = T11_;
			T17_ = (NIM_CHAR)0;
			{
				if (!(j < (b ? b->len : 0))) goto LA20_;
{				T17_ = nsuToLowerAsciiChar(b->data[j]);
}			}
			goto LA18_;
			LA20_: ;
			{
				T17_ = 0;
			}
			LA18_: ;
			NIM_CHAR bb = T17_;
			result = (NI)(((NU8)(aa)) - ((NU8)(bb)));
			{
				if (!!((result == ((NI) 0)))) goto LA25_;
{				goto BeforeRet_;
}			}
			LA25_: ;
			{
				if (!((a ? a->len : 0) <= i)) goto LA29_;
{				{
					if (!((b ? b->len : 0) <= j)) goto LA33_;
{					result = ((NI) 0);
					goto BeforeRet_;
}				}
				LA33_: ;
				result = ((NI) -1);
				goto BeforeRet_;
}			}
			goto LA27_;
			LA29_: ;
			{
				if (!((b ? b->len : 0) <= j)) goto LA36_;
{				result = ((NI) 1);
				goto BeforeRet_;
}			}
			goto LA27_;
			LA36_: ;
			LA27_: ;
			i += ((NI) 1);
			j += ((NI) 1);
		}
	}
	}BeforeRet_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NI, findNormalized_SW1VCMDsxPTtzxnYrf3N6w)(NimStringDesc* x, NimStringDesc** inArray, NI inArrayLen_0) {
	NI result;
	nimfr_("findNormalized", "strutils.nim");
{	result = (NI)0;
	NI i = ((NI) 0);
	{
		while (1) {
			if (!(i < (inArrayLen_0-1))) goto LA2;
			{
				NI T5_;
				T5_ = (NI)0;
				T5_ = nsuCmpIgnoreStyle(x, inArray[i]);
				if (!(T5_ == ((NI) 0))) goto LA6_;
{				result = i;
				goto BeforeRet_;
}			}
			LA6_: ;
			i += ((NI) 2);
		} LA2: ;
	}
	result = ((NI) -1);
	goto BeforeRet_;
	}BeforeRet_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(void, nsuAddf)(NimStringDesc*& s, NimStringDesc* formatstr, NimStringDesc** a, NI aLen_0) {
	nimfr_("addf", "strutils.nim");
	NI i = ((NI) 0);
	NI num = ((NI) 0);
	{
		while (1) {
			if (!(i < (formatstr ? formatstr->len : 0))) goto LA2;
			{
				NIM_BOOL T5_;
				T5_ = (NIM_BOOL)0;
				T5_ = ((NU8)(formatstr->data[i]) == (NU8)(36));
				if (!(T5_)) goto LA6_;
				T5_ = ((NI)(i + ((NI) 1)) < (formatstr ? formatstr->len : 0));
				LA6_: ;
				if (!T5_) goto LA7_;
{				switch (((NU8)(formatstr->data[(NI)(i + ((NI) 1))]))) {
				case 35:
				{
					{
						if (!((aLen_0-1) < num)) goto LA12_;
{						invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
}					}
					LA12_: ;
					s = resizeString(s, (a[num] ? a[num]->len : 0) + 0);
					memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2311);
appendString(s, a[num]);
					i += ((NI) 2);
					num += ((NI) 1);
				}
				break;
				case 36:
				{
					s = addChar(s, 36);
					memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2315);
					i += ((NI) 2);
				}
				break;
				case 49 ... 57:
				case 45:
				{
					NI T24_;
					NI j = ((NI) 0);
					i += ((NI) 1);
					NIM_BOOL negative = ((NU8)(formatstr->data[i]) == (NU8)(45));
					{
						if (!negative) goto LA18_;
{						i += ((NI) 1);
}					}
					LA18_: ;
					{
						while (1) {
							NIM_BOOL T22_;
							T22_ = (NIM_BOOL)0;
							T22_ = (i < (formatstr ? formatstr->len : 0));
							if (!(T22_)) goto LA23_;
							T22_ = (((NU8)(formatstr->data[i])) >= ((NU8)(48)) && ((NU8)(formatstr->data[i])) <= ((NU8)(57)));
							LA23_: ;
							if (!T22_) goto LA21;
							j = (NI)((NI)((NI)(j * ((NI) 10)) + ((NU8)(formatstr->data[i]))) - ((NI) 48));
							i += ((NI) 1);
						} LA21: ;
					}
					T24_ = (NI)0;
					{
						if (!!(negative)) goto LA27_;
{						T24_ = (NI)(j - ((NI) 1));
}					}
					goto LA25_;
					LA27_: ;
					{
						T24_ = (NI)(aLen_0 - j);
					}
					LA25_: ;
					NI idx = T24_;
					{
						NIM_BOOL T32_;
						T32_ = (NIM_BOOL)0;
						T32_ = (idx < ((NI) 0));
						if (T32_) goto LA33_;
						T32_ = ((aLen_0-1) < idx);
						LA33_: ;
						if (!T32_) goto LA34_;
{						invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
}					}
					LA34_: ;
					s = resizeString(s, (a[idx] ? a[idx]->len : 0) + 0);
					memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2327);
appendString(s, a[idx]);
				}
				break;
				case 123:
				{
					NI j_2 = (NI)(i + ((NI) 2));
					NI k = ((NI) 0);
					NIM_BOOL negative_2 = ((NU8)(formatstr->data[j_2]) == (NU8)(45));
					{
						if (!negative_2) goto LA39_;
{						j_2 += ((NI) 1);
}					}
					LA39_: ;
					NI isNumber = ((NI) 0);
					{
						while (1) {
							NIM_BOOL T43_;
							T43_ = (NIM_BOOL)0;
							T43_ = (j_2 < (formatstr ? formatstr->len : 0));
							if (!(T43_)) goto LA44_;
							T43_ = !((((NU8)(formatstr->data[j_2])) == ((NU8)(0)) || ((NU8)(formatstr->data[j_2])) == ((NU8)(125))));
							LA44_: ;
							if (!T43_) goto LA42;
							{
								if (!(((NU8)(formatstr->data[j_2])) >= ((NU8)(48)) && ((NU8)(formatstr->data[j_2])) <= ((NU8)(57)))) goto LA47_;
{								k = (NI)((NI)((NI)(k * ((NI) 10)) + ((NU8)(formatstr->data[j_2]))) - ((NI) 48));
								{
									if (!(isNumber == ((NI) 0))) goto LA51_;
{									isNumber = ((NI) 1);
}								}
								LA51_: ;
}							}
							goto LA45_;
							LA47_: ;
							{
								isNumber = ((NI) -1);
							}
							LA45_: ;
							j_2 += ((NI) 1);
						} LA42: ;
					}
					{
						NI T58_;
						if (!(isNumber == ((NI) 1))) goto LA56_;
{						T58_ = (NI)0;
						{
							if (!!(negative_2)) goto LA61_;
{							T58_ = (NI)(k - ((NI) 1));
}						}
						goto LA59_;
						LA61_: ;
						{
							T58_ = (NI)(aLen_0 - k);
						}
						LA59_: ;
						NI idx_2 = T58_;
						{
							NIM_BOOL T66_;
							T66_ = (NIM_BOOL)0;
							T66_ = (idx_2 < ((NI) 0));
							if (T66_) goto LA67_;
							T66_ = ((aLen_0-1) < idx_2);
							LA67_: ;
							if (!T66_) goto LA68_;
{							invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
}						}
						LA68_: ;
						s = resizeString(s, (a[idx_2] ? a[idx_2]->len : 0) + 0);
						memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2344);
appendString(s, a[idx_2]);
}					}
					goto LA54_;
					LA56_: ;
					{
						NI x = findNormalized_SW1VCMDsxPTtzxnYrf3N6w(substr_TWXUwbnq0SWWvDLfr8LXYw(formatstr, (NI)(i + ((NI) 2)), (NI)(j_2 - ((NI) 1))), a, aLen_0);
						{
							NIM_BOOL T73_;
							T73_ = (NIM_BOOL)0;
							T73_ = (((NI) 0) <= x);
							if (!(T73_)) goto LA74_;
							T73_ = (x < (aLen_0-1));
							LA74_: ;
							if (!T73_) goto LA75_;
{							s = resizeString(s, (a[(NI)(x + ((NI) 1))] ? a[(NI)(x + ((NI) 1))]->len : 0) + 0);
							memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2347);
appendString(s, a[(NI)(x + ((NI) 1))]);
}						}
						goto LA71_;
						LA75_: ;
						{
							invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
						}
						LA71_: ;
					}
					LA54_: ;
					i = (NI)(j_2 + ((NI) 1));
				}
				break;
				case 97 ... 122:
				case 65 ... 90:
				case 128 ... 255:
				case 95:
				{
					NI j_3 = (NI)(i + ((NI) 1));
					{
						while (1) {
							NIM_BOOL T81_;
							T81_ = (NIM_BOOL)0;
							T81_ = (j_3 < (formatstr ? formatstr->len : 0));
							if (!(T81_)) goto LA82_;
							T81_ = (((NU8)(formatstr->data[j_3])) >= ((NU8)(97)) && ((NU8)(formatstr->data[j_3])) <= ((NU8)(122)) || ((NU8)(formatstr->data[j_3])) >= ((NU8)(65)) && ((NU8)(formatstr->data[j_3])) <= ((NU8)(90)) || ((NU8)(formatstr->data[j_3])) >= ((NU8)(48)) && ((NU8)(formatstr->data[j_3])) <= ((NU8)(57)) || ((NU8)(formatstr->data[j_3])) >= ((NU8)(128)) && ((NU8)(formatstr->data[j_3])) <= ((NU8)(255)) || ((NU8)(formatstr->data[j_3])) == ((NU8)(95)));
							LA82_: ;
							if (!T81_) goto LA80;
							j_3 += ((NI) 1);
						} LA80: ;
					}
					NI x_2 = findNormalized_SW1VCMDsxPTtzxnYrf3N6w(substr_TWXUwbnq0SWWvDLfr8LXYw(formatstr, (NI)(i + ((NI) 1)), (NI)(j_3 - ((NI) 1))), a, aLen_0);
					{
						NIM_BOOL T85_;
						T85_ = (NIM_BOOL)0;
						T85_ = (((NI) 0) <= x_2);
						if (!(T85_)) goto LA86_;
						T85_ = (x_2 < (aLen_0-1));
						LA86_: ;
						if (!T85_) goto LA87_;
{						s = resizeString(s, (a[(NI)(x_2 + ((NI) 1))] ? a[(NI)(x_2 + ((NI) 1))]->len : 0) + 0);
						memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2354);
appendString(s, a[(NI)(x_2 + ((NI) 1))]);
}					}
					goto LA83_;
					LA87_: ;
					{
						invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
					}
					LA83_: ;
					i = j_3;
				}
				break;
				default:
				{
					invalidFormatString_61EJWW6vRISEo9a8gt0tusw();
				}
				break;
				}
}			}
			goto LA3_;
			LA7_: ;
			{
				s = addChar(s, formatstr->data[i]);
				memTrackerWrite((void*)(&s), 8, "/Users/matt/lib/Nim/lib/pure/strutils.nim", 2360);
				i += ((NI) 1);
			}
			LA3_: ;
		} LA2: ;
	}
	popFrame();
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nsuFormatOpenArray)(NimStringDesc* formatstr, NimStringDesc** a, NI aLen_0) {
	NimStringDesc* result;
	nimfr_("%", "strutils.nim");
	result = (NimStringDesc*)0;
	result = rawNewString(((NI) ((NI)((formatstr ? formatstr->len : 0) + (NI)((NU64)(aLen_0) << (NU64)(((NI) 4)))))));
	nsuAddf(result, formatstr, a, aLen_0);
	popFrame();
	return result;
}
