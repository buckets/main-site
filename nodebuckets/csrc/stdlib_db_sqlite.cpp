/* Generated by Nim Compiler v0.19.9 */
/*   (c) 2018 Andreas Rumpf */
/* The generated code is subject to the original license. */
#define NIM_NEW_MANGLING_RULES
#define NIM_INTBITS 64

#include "nimbase.h"
#include <string.h>
#include <new>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA;
struct NimStringDesc;
struct TGenericSeq;
struct tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw;
struct tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ;
struct tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw;
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA;
struct Exception;
struct RootObj;
struct TNimType;
struct TNimNode;
struct tySequence_uB9b75OUPRENsBAu4AnoePA;
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA;
struct TGenericSeq {
NI len;
NI reserved;
};
struct NimStringDesc : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef NU8 tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A;
typedef NU8 tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ;
typedef N_NIMCALL_PTR(void, tyProc_ojoeKfW4VYIm36I9cpDTQIg) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ) (void* p);
struct TNimType {
NI size;
tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A kind;
tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ flags;
TNimType* base;
TNimNode* node;
void* finalizer;
tyProc_ojoeKfW4VYIm36I9cpDTQIg marker;
tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ deepcopy;
};
struct RootObj {
TNimType* m_type;
};
N_NIMCALL(void, popCurrentExceptionEx)(NU id);
struct Exception : public RootObj {
virtual void raise() {throw *this;}
~Exception() {if(this->raiseId) popCurrentExceptionEx(this->raiseId);}
Exception* parent;
NCSTRING name;
NimStringDesc* message;
tySequence_uB9b75OUPRENsBAu4AnoePA* trace;
NU raiseId;
Exception* up;
};
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA : public Exception {
virtual void raise() {throw *this;}
};
struct tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw : public tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA {
virtual void raise() {throw *this;}
};
struct tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ : public tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw {
virtual void raise() {throw *this;}
};
typedef NU8 tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ;
struct TNimNode {
tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
struct tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA {
char dummy;
};
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA {
NCSTRING procname;
NI line;
NCSTRING filename;
};
struct tySequence_uB9b75OUPRENsBAu4AnoePA : TGenericSeq {
  tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA data[SEQ_DECL_SIZE];
};
N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, tryExec_Wy7WfNcrDtpQlAr7l6ZBZw)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db, NimStringDesc* query, NimStringDesc** args, NI argsLen_0);
N_LIB_PRIVATE N_NIMCALL(void, failedAssertImpl_aDmpBTs9cPuXp0Mp9cfiNeyA)(NimStringDesc* msg);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dbFormat_4xitxSXjtmpEVS63UNhgwA)(NimStringDesc* formatstr, NimStringDesc** args, NI argsLen_0);
N_NOINLINE(void, raiseIndexError2)(NI i, NI n);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dbQuote_n8zdcw6t64ZGFNADbUlAfA)(NimStringDesc* s);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src);
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src);
static N_INLINE(void, copyMem_E1xtACub5WcDa3vbrIXbwgsystem)(void* dest, void* source, NI size);
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen);
N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s, NIM_CHAR c);
static N_INLINE(NI, addInt)(NI a, NI b);
N_NOINLINE(void, raiseOverflow)(void);
static N_INLINE(void, nimFrame)(TFrame* s);
N_LIB_PRIVATE N_NOINLINE(void, callDepthLimitReached_II46IjNZztN9bmbxUD8dt8g)(void);
static N_INLINE(void, popFrame)(void);
extern "C" N_CDECL(int, sqlite3_prepare_v2)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db, NCSTRING zSql, int nByte, tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw*& ppStmt, NCSTRING* pzTail);
static N_INLINE(NCSTRING, nimToCStringConv)(NimStringDesc* s);
static N_INLINE(NI, chckRange)(NI i, NI a, NI b);
N_NOINLINE(void, raiseRangeError)(NI64 val);
extern "C" N_CDECL(NI32, sqlite3_step)(tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw* para1);
extern "C" N_CDECL(NI32, sqlite3_finalize)(tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw* pStmt);
N_LIB_PRIVATE N_NIMCALL(void, dbError_yRzNipQFOsKqLVySy7Je9bw)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db) __attribute__((noreturn));
N_NIMCALL(void, popCurrentExceptionEx)(NU id);
N_NIMCALL(void*, newObj)(TNimType* typ, NI size);
extern "C" N_CDECL(NCSTRING, sqlite3_errmsg)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* para1);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
N_NIMCALL(void, memTrackerWrite)(void* address, NI size, NCSTRING file, NI line);
N_NIMCALL(void, raiseExceptionEx)(Exception* e, NCSTRING ename, NCSTRING procname, NCSTRING filename, NI line);
extern "C" N_CDECL(NI32, sqlite3_open)(NCSTRING filename, tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA*& ppDb);
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TFrame* framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
extern TNimType NTI_ZVbaMVrRDW1Cj9bby6YsVhA_;
extern TNimType NTI_9cp8FUMATyqFmLaAKCXEjCQ_;
STRING_LITERAL(TM_Y7t52g9b69cVuzHT832OjgmA_2, "/Users/matt/lib/Nim/lib/impure/db_sqlite.nim(127, 9) `not db.is"
"Nil` Database not connected.", 91);
STRING_LITERAL(TM_Y7t52g9b69cVuzHT832OjgmA_3, "\'", 1);
STRING_LITERAL(TM_Y7t52g9b69cVuzHT832OjgmA_4, "\'\'", 2);
STRING_LITERAL(TM_Y7t52g9b69cVuzHT832OjgmA_6, "/Users/matt/lib/Nim/lib/system.nim(4033, 11) `len(a) == L` stri"
"ng modified while iterating over it", 98);
STRING_LITERAL(TM_Y7t52g9b69cVuzHT832OjgmA_9, "/Users/matt/lib/Nim/lib/impure/db_sqlite.nim(146, 9) `not db.is"
"Nil` Database not connected.", 91);

static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size) {
	void* T1_;
	T1_ = (void*)0;
	T1_ = memcpy(dest, source, ((size_t) (size)));
}

static N_INLINE(void, copyMem_E1xtACub5WcDa3vbrIXbwgsystem)(void* dest, void* source, NI size) {
	nimCopyMem(dest, source, size);
}

static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src) {
	{
		if (!!((src == NIM_NIL))) goto LA3_;
{		copyMem_E1xtACub5WcDa3vbrIXbwgsystem(((void*) ((&(*dest).data[(*dest).len]))), ((void*) ((*src).data)), ((NI) ((NI)((*src).len + ((NI) 1)))));
		(*dest).len += (*src).len;
}	}
	LA3_: ;
}

static N_INLINE(NI, addInt)(NI a, NI b) {
	NI result;
{	result = (NI)0;
	result = (NI)((NU64)(a) + (NU64)(b));
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI) 0) <= (NI)(result ^ a));
		if (T3_) goto LA4_;
		T3_ = (((NI) 0) <= (NI)(result ^ b));
		LA4_: ;
		if (!T3_) goto LA5_;
{		goto BeforeRet_;
}	}
	LA5_: ;
	raiseOverflow();
	}BeforeRet_: ;
	return result;
}

static N_INLINE(void, nimFrame)(TFrame* s) {
	NI T1_;
	T1_ = (NI)0;
	{
		if (!(framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw == NIM_NIL)) goto LA4_;
{		T1_ = ((NI) 0);
}	}
	goto LA2_;
	LA4_: ;
	{
		T1_ = ((NI) ((NI16)((*framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw).calldepth + ((NI16) 1))));
	}
	LA2_: ;
	(*s).calldepth = ((NI16) (T1_));
	(*s).prev = framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw;
	framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw = s;
	{
		if (!((*s).calldepth == ((NI16) (((NI) 2000))))) goto LA9_;
{		callDepthLimitReached_II46IjNZztN9bmbxUD8dt8g();
}	}
	LA9_: ;
}

static N_INLINE(void, popFrame)(void) {
	framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw = (*framePtr_HRfVMH3jYeBJz6Q6X9b6Ptw).prev;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dbQuote_n8zdcw6t64ZGFNADbUlAfA)(NimStringDesc* s) {
	NimStringDesc* result;
	nimfr_("dbQuote", "db_sqlite.nim");
	result = (NimStringDesc*)0;
	nimln_(107, "db_sqlite.nim");
	result = copyString(((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_3));
	{
		NIM_CHAR c;
		c = (NIM_CHAR)0;
		nimln_(4028, "system.nim");
		NI i = ((NI) 0);
		nimln_(4029, "system.nim");
		NI L = (s ? s->len : 0);
		{
			nimln_(4030, "system.nim");
			while (1) {
				NI TM_Y7t52g9b69cVuzHT832OjgmA_5;
				if (!(i < L)) goto LA3;
				nimln_(108, "db_sqlite.nim");
				if ((NU)(i) >= (NU)(s ? s->len : 0)) raiseIndexError2(i,(s ? s->len : 0)-1);
				c = s->data[i];
				nimln_(109, "db_sqlite.nim");
				{
					if (!((NU8)(c) == (NU8)(39))) goto LA6_;
{					result = resizeString(result, 2);
appendString(result, ((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_4));
}				}
				goto LA4_;
				LA6_: ;
				{
					nimln_(110, "db_sqlite.nim");
					result = addChar(result, c);
				}
				LA4_: ;
				nimln_(4032, "system.nim");
				TM_Y7t52g9b69cVuzHT832OjgmA_5 = addInt(i, ((NI) 1));
				i = (NI)(TM_Y7t52g9b69cVuzHT832OjgmA_5);
				nimln_(4033, "system.nim");
				{
					if (!!(((s ? s->len : 0) == L))) goto LA11_;
{					failedAssertImpl_aDmpBTs9cPuXp0Mp9cfiNeyA(((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_6));
}				}
				LA11_: ;
			} LA3: ;
		}
	}
	nimln_(111, "db_sqlite.nim");
	result = addChar(result, 39);
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dbFormat_4xitxSXjtmpEVS63UNhgwA)(NimStringDesc* formatstr, NimStringDesc** args, NI argsLen_0) {
	NimStringDesc* result;
	nimfr_("dbFormat", "db_sqlite.nim");
	result = (NimStringDesc*)0;
	nimln_(114, "db_sqlite.nim");
	result = ((NimStringDesc*) NIM_NIL);
	nimln_(115, "db_sqlite.nim");
	NI a = ((NI) 0);
	{
		NIM_CHAR c;
		NimStringDesc* colontmp_;
		c = (NIM_CHAR)0;
		colontmp_ = (NimStringDesc*)0;
		nimln_(116, "db_sqlite.nim");
		colontmp_ = formatstr;
		nimln_(4028, "system.nim");
		NI i = ((NI) 0);
		nimln_(4029, "system.nim");
		NI L = (colontmp_ ? colontmp_->len : 0);
		{
			nimln_(4030, "system.nim");
			while (1) {
				NI TM_Y7t52g9b69cVuzHT832OjgmA_8;
				if (!(i < L)) goto LA3;
				nimln_(116, "db_sqlite.nim");
				if ((NU)(i) >= (NU)(colontmp_ ? colontmp_->len : 0)) raiseIndexError2(i,(colontmp_ ? colontmp_->len : 0)-1);
				c = colontmp_->data[i];
				nimln_(117, "db_sqlite.nim");
				{
					NimStringDesc* T8_;
					NI TM_Y7t52g9b69cVuzHT832OjgmA_7;
					if (!((NU8)(c) == (NU8)(63))) goto LA6_;
{					nimln_(118, "db_sqlite.nim");
					if ((NU)(a) >= (NU)(argsLen_0)) raiseIndexError2(a,argsLen_0-1);
					T8_ = (NimStringDesc*)0;
					T8_ = dbQuote_n8zdcw6t64ZGFNADbUlAfA(args[a]);
					result = resizeString(result, (T8_ ? T8_->len : 0) + 0);
appendString(result, T8_);
					nimln_(119, "db_sqlite.nim");
					TM_Y7t52g9b69cVuzHT832OjgmA_7 = addInt(a, ((NI) 1));
					a = (NI)(TM_Y7t52g9b69cVuzHT832OjgmA_7);
}				}
				goto LA4_;
				LA6_: ;
				{
					nimln_(121, "db_sqlite.nim");
					result = addChar(result, c);
				}
				LA4_: ;
				nimln_(4032, "system.nim");
				TM_Y7t52g9b69cVuzHT832OjgmA_8 = addInt(i, ((NI) 1));
				i = (NI)(TM_Y7t52g9b69cVuzHT832OjgmA_8);
				nimln_(4033, "system.nim");
				{
					if (!!(((colontmp_ ? colontmp_->len : 0) == L))) goto LA12_;
{					failedAssertImpl_aDmpBTs9cPuXp0Mp9cfiNeyA(((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_6));
}				}
				LA12_: ;
			} LA3: ;
		}
	}
	popFrame();
	return result;
}

static N_INLINE(NCSTRING, nimToCStringConv)(NimStringDesc* s) {
	NCSTRING result;
	result = (NCSTRING)0;
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (s == NIM_NIL);
		if (T3_) goto LA4_;
		T3_ = ((*s).len == ((NI) 0));
		LA4_: ;
		if (!T3_) goto LA5_;
{		result = "";
}	}
	goto LA1_;
	LA5_: ;
	{
		result = ((NCSTRING) ((*s).data));
	}
	LA1_: ;
	return result;
}

static N_INLINE(NI, chckRange)(NI i, NI a, NI b) {
	NI result;
{	result = (NI)0;
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (a <= i);
		if (!(T3_)) goto LA4_;
		T3_ = (i <= b);
		LA4_: ;
		if (!T3_) goto LA5_;
{		result = i;
		goto BeforeRet_;
}	}
	goto LA1_;
	LA5_: ;
	{
		raiseRangeError(((NI64) (i)));
	}
	LA1_: ;
	}BeforeRet_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, tryExec_Wy7WfNcrDtpQlAr7l6ZBZw)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db, NimStringDesc* query, NimStringDesc** args, NI argsLen_0) {
	NIM_BOOL result;
	NimStringDesc* q;
	tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw* stmt;
	nimfr_("tryExec", "db_sqlite.nim");
	result = (NIM_BOOL)0;
	nimln_(127, "db_sqlite.nim");
	{
		if (!!(!((db == 0)))) goto LA3_;
{		failedAssertImpl_aDmpBTs9cPuXp0Mp9cfiNeyA(((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_2));
}	}
	LA3_: ;
	nimln_(128, "db_sqlite.nim");
	q = dbFormat_4xitxSXjtmpEVS63UNhgwA(query, args, argsLen_0);
	stmt = (tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw*)0;
	nimln_(130, "db_sqlite.nim");
	{
		int T7_;
		T7_ = (int)0;
		T7_ = sqlite3_prepare_v2(db, nimToCStringConv(q), ((int)chckRange((q ? q->len : 0), ((int) (-2147483647 -1)), ((int) 2147483647))), stmt, NIM_NIL);
		if (!(T7_ == ((NI32) 0))) goto LA8_;
{		nimln_(131, "db_sqlite.nim");
		NI32 x = sqlite3_step(stmt);
		nimln_(132, "db_sqlite.nim");
		{
			NI32 T14_;
			if (!(x == ((NI) 101) || x == ((NI) 100))) goto LA12_;
{			nimln_(133, "db_sqlite.nim");
			T14_ = (NI32)0;
			T14_ = sqlite3_finalize(stmt);
			result = (T14_ == ((NI32) 0));
}		}
		LA12_: ;
}	}
	LA8_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(void, dbError_yRzNipQFOsKqLVySy7Je9bw)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db) {
	tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ* e;
	NCSTRING T1_;
	nimfr_("dbError", "db_sqlite.nim");
	e = (tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ*)0;
	nimln_(101, "db_sqlite.nim");
	e = (tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ*) newObj((&NTI_ZVbaMVrRDW1Cj9bby6YsVhA_), sizeof(tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ));
	new (e) tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ;
	(*e).m_type = (&NTI_9cp8FUMATyqFmLaAKCXEjCQ_);
	nimln_(102, "db_sqlite.nim");
	T1_ = (NCSTRING)0;
	T1_ = sqlite3_errmsg(db);
	(*e).message = cstrToNimstr(T1_);
	memTrackerWrite((void*)(&(*e).message), 8, "/Users/matt/lib/Nim/lib/impure/db_sqlite.nim", 102);
	nimln_(103, "db_sqlite.nim");
	raiseExceptionEx((Exception*)e, "DbError", "dbError", "../../../../../lib/Nim/lib/impure/db_sqlite.nim", 103);
	popFrame();
}

N_LIB_PRIVATE N_NIMCALL(void, exec_kASFnJjvwTJpKpmn9aQHmPg)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db, NimStringDesc* query, NimStringDesc** args, NI argsLen_0) {
	nimfr_("exec", "db_sqlite.nim");
	nimln_(138, "db_sqlite.nim");
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = tryExec_Wy7WfNcrDtpQlAr7l6ZBZw(db, query, args, argsLen_0);
		if (!!(T3_)) goto LA4_;
{		dbError_yRzNipQFOsKqLVySy7Je9bw(db);
}	}
	LA4_: ;
	popFrame();
}

N_LIB_PRIVATE N_NIMCALL(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA*, open_SRJkmN7JR2aulOhbafCrYA)(NimStringDesc* connection, NimStringDesc* user, NimStringDesc* password, NimStringDesc* database) {
	tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* result;
	tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db;
	nimfr_("open", "db_sqlite.nim");
	result = (tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA*)0;
	db = (tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA*)0;
	nimln_(312, "db_sqlite.nim");
	{
		NI32 T3_;
		T3_ = (NI32)0;
		T3_ = sqlite3_open(nimToCStringConv(connection), db);
		if (!(T3_ == ((NI32) 0))) goto LA4_;
{		nimln_(313, "db_sqlite.nim");
		result = db;
}	}
	goto LA1_;
	LA4_: ;
	{
		nimln_(315, "db_sqlite.nim");
		dbError_yRzNipQFOsKqLVySy7Je9bw(db);
	}
	LA1_: ;
	popFrame();
	return result;
}

N_LIB_PRIVATE N_NIMCALL(tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw*, setupQuery_6EQAJlzQgp6Lnc8upW20sQ)(tyObject_Sqlite3_xRZkbCqVWSKf8kX4o9cbKXA* db, NimStringDesc* query, NimStringDesc** args, NI argsLen_0) {
	tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw* result;
	NimStringDesc* q;
	nimfr_("setupQuery", "db_sqlite.nim");
	result = (tyObject_Tstmt_KEhcjAECDwKIYLLjIzakvw*)0;
	nimln_(146, "db_sqlite.nim");
	{
		if (!!(!((db == 0)))) goto LA3_;
{		failedAssertImpl_aDmpBTs9cPuXp0Mp9cfiNeyA(((NimStringDesc*) &TM_Y7t52g9b69cVuzHT832OjgmA_9));
}	}
	LA3_: ;
	nimln_(147, "db_sqlite.nim");
	q = dbFormat_4xitxSXjtmpEVS63UNhgwA(query, args, argsLen_0);
	nimln_(148, "db_sqlite.nim");
	{
		int T7_;
		nimln_(483, "system.nim");
		nimln_(148, "db_sqlite.nim");
		T7_ = (int)0;
		T7_ = sqlite3_prepare_v2(db, nimToCStringConv(q), ((int)chckRange((q ? q->len : 0), ((int) (-2147483647 -1)), ((int) 2147483647))), result, NIM_NIL);
		if (!!((T7_ == ((NI32) 0)))) goto LA8_;
{		dbError_yRzNipQFOsKqLVySy7Je9bw(db);
}	}
	LA8_: ;
	popFrame();
	return result;
}
