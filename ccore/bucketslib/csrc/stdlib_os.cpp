/* Generated by Nim Compiler v0.19.1 */
/*   (c) 2018 Andreas Rumpf */
/* The generated code is subject to the original license. */
#define NIM_NEW_MANGLING_RULES
#define NIM_INTBITS 64

#include "nimbase.h"
#include <sys/param.h>
#include <mach-o/dyld.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct NimStringDesc;
struct TGenericSeq;
struct TGenericSeq {
NI len;
NI reserved;
};
typedef NIM_CHAR tyUncheckedArray_py3s8sMDoAoBkn8uuh0ZzQ[1];
struct NimStringDesc : public TGenericSeq {
tyUncheckedArray_py3s8sMDoAoBkn8uuh0ZzQ data;
};
typedef NU8 tyEnum_FileMode_fVUBHvW79bXUw1j55Oo9avSQ;
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
static N_INLINE(NCSTRING, nimToCStringConv)(NimStringDesc* s);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nosexpandFilename)(NimStringDesc* filename);
N_LIB_PRIVATE N_NOINLINE(void, raiseOSError_bEwAamo1N7TKcaU9akpiyIg)(NI32 errorCode, NimStringDesc* additionalInfo);
N_LIB_PRIVATE N_NIMCALL(NI32, osLastError_tNPXXFl9cb3BG0pJKzUn9bew)(void);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, tryMoveFSObject_kAUHL0UShtIjkMl3w2BG3A)(NimStringDesc* source, NimStringDesc* dest);
N_LIB_PRIVATE N_NIMCALL(void, noscopyFile)(NimStringDesc* source, NimStringDesc* dest);
N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, open_sEp0GH2306oGo9bqBpj5oTQ)(FILE*& f, NimStringDesc* filename, tyEnum_FileMode_fVUBHvW79bXUw1j55Oo9avSQ mode, NI bufSize);
N_LIB_PRIVATE N_NIMCALL(void, close_BWnr8V7RERYno9bIdPmw8Hw_3)(FILE* f);
N_LIB_PRIVATE N_NOCONV(void*, alloc_sVm4rDImKK2ZDdylByayiA)(NI size);
N_LIB_PRIVATE N_NIMCALL(NI, readBuffer_1qjbrvfnPD4PaIieHVDvhw_2)(FILE* f, void* buffer, NI len);
N_LIB_PRIVATE N_NIMCALL(NI, writeBuffer_1qjbrvfnPD4PaIieHVDvhw)(FILE* f, void* buffer, NI len);
N_LIB_PRIVATE N_NOCONV(void, dealloc_RCjNtRnHdRYntrcE7YtwWw)(void* p);
N_LIB_PRIVATE N_NIMCALL(void, flushFile_BWnr8V7RERYno9bIdPmw8Hw_2)(FILE* f);
N_NIMCALL(void, popCurrentExceptionEx)(NU id);
N_LIB_PRIVATE N_NIMCALL(void, nosremoveFile)(NimStringDesc* file);
N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, nostryRemoveFile)(NimStringDesc* file);
extern int cmdCount;
extern NCSTRING* cmdLine;

static N_INLINE(NCSTRING, nimToCStringConv)(NimStringDesc* s) {
	NCSTRING result;
	result = (NCSTRING)0;
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (s == NIM_NIL);
		if (T3_) goto LA4_;
		T3_ = ((*s).len == ((NI) 0));
		LA4_: ;
		if (!T3_) goto LA5_;
{		result = "";
}	}
	goto LA1_;
	LA5_: ;
	{
		result = ((NCSTRING) ((*s).data));
	}
	LA1_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nosexpandFilename)(NimStringDesc* filename) {
	NimStringDesc* result;
	result = (NimStringDesc*)0;
	NCSTRING r = realpath(nimToCStringConv(filename), NIM_NIL);
	{
		if (!(r == 0)) goto LA3_;
{		raiseOSError_bEwAamo1N7TKcaU9akpiyIg(osLastError_tNPXXFl9cb3BG0pJKzUn9bew(), ((NimStringDesc*) NIM_NIL));
}	}
	goto LA1_;
	LA3_: ;
	{
		result = cstrToNimstr(r);
		free(((void*) (r)));
	}
	LA1_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, nosgetAppFilename)(void) {
	NimStringDesc* result;
	unsigned int size;
	result = (NimStringDesc*)0;
	size = (unsigned int)0;
	_NSGetExecutablePath(NIM_NIL, (&size));
	result = mnewString(((NI) (size)));
	{
		if (!_NSGetExecutablePath(nimToCStringConv(result), (&size))) goto LA3_;
{		result = ((NimStringDesc*) NIM_NIL);
}	}
	LA3_: ;
	{
		if (!(((NI) 0) < (result ? result->len : 0))) goto LA7_;
{		result = nosexpandFilename(result);
}	}
	LA7_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, tryMoveFSObject_kAUHL0UShtIjkMl3w2BG3A)(NimStringDesc* source, NimStringDesc* dest) {
	NIM_BOOL result;
{	result = (NIM_BOOL)0;
	{
		int T3_;
		T3_ = (int)0;
		T3_ = rename(nimToCStringConv(source), nimToCStringConv(dest));
		if (!!((T3_ == ((NI32) 0)))) goto LA4_;
{		NI32 err = osLastError_tNPXXFl9cb3BG0pJKzUn9bew();
		{
			if (!(err == EXDEV)) goto LA8_;
{			result = NIM_FALSE;
			goto BeforeRet_;
}		}
		goto LA6_;
		LA8_: ;
		{
			NCSTRING T11_;
			NimStringDesc* T12_;
			T11_ = (NCSTRING)0;
			T11_ = strerror(errno);
			T12_ = (NimStringDesc*)0;
			T12_ = cstrToNimstr(T11_);
			raiseOSError_bEwAamo1N7TKcaU9akpiyIg(err, T12_);
		}
		LA6_: ;
}	}
	LA4_: ;
	result = NIM_TRUE;
	goto BeforeRet_;
	}BeforeRet_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(void, noscopyFile)(NimStringDesc* source, NimStringDesc* dest) {
	FILE* d;
	FILE* s;
	d = (FILE*)0;
	s = (FILE*)0;
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = open_sEp0GH2306oGo9bqBpj5oTQ(s, source, ((tyEnum_FileMode_fVUBHvW79bXUw1j55Oo9avSQ) 0), ((NI) -1));
		if (!!(T3_)) goto LA4_;
{		raiseOSError_bEwAamo1N7TKcaU9akpiyIg(osLastError_tNPXXFl9cb3BG0pJKzUn9bew(), ((NimStringDesc*) NIM_NIL));
}	}
	LA4_: ;
	{
		NIM_BOOL T8_;
		T8_ = (NIM_BOOL)0;
		T8_ = open_sEp0GH2306oGo9bqBpj5oTQ(d, dest, ((tyEnum_FileMode_fVUBHvW79bXUw1j55Oo9avSQ) 1), ((NI) -1));
		if (!!(T8_)) goto LA9_;
{		close_BWnr8V7RERYno9bIdPmw8Hw_3(s);
		raiseOSError_bEwAamo1N7TKcaU9akpiyIg(osLastError_tNPXXFl9cb3BG0pJKzUn9bew(), ((NimStringDesc*) NIM_NIL));
}	}
	LA9_: ;
	void* buf = alloc_sVm4rDImKK2ZDdylByayiA(((NI) 8000));
	{
		while (1) {
			NI bytesread = readBuffer_1qjbrvfnPD4PaIieHVDvhw_2(s, buf, ((NI) 8000));
			{
				if (!(((NI) 0) < bytesread)) goto LA15_;
{				NI byteswritten = writeBuffer_1qjbrvfnPD4PaIieHVDvhw(d, buf, ((NI) (bytesread)));
				{
					if (!!((bytesread == byteswritten))) goto LA19_;
{					dealloc_RCjNtRnHdRYntrcE7YtwWw(buf);
					close_BWnr8V7RERYno9bIdPmw8Hw_3(s);
					close_BWnr8V7RERYno9bIdPmw8Hw_3(d);
					raiseOSError_bEwAamo1N7TKcaU9akpiyIg(osLastError_tNPXXFl9cb3BG0pJKzUn9bew(), ((NimStringDesc*) NIM_NIL));
}				}
				LA19_: ;
}			}
			LA15_: ;
			{
				if (!!((bytesread == ((NI) 8000)))) goto LA23_;
{				goto LA11;
}			}
			LA23_: ;
		}
	} LA11: ;
	dealloc_RCjNtRnHdRYntrcE7YtwWw(buf);
	close_BWnr8V7RERYno9bIdPmw8Hw_3(s);
	flushFile_BWnr8V7RERYno9bIdPmw8Hw_2(d);
	close_BWnr8V7RERYno9bIdPmw8Hw_3(d);
}

N_LIB_PRIVATE N_NIMCALL(NIM_BOOL, nostryRemoveFile)(NimStringDesc* file) {
	NIM_BOOL result;
	result = (NIM_BOOL)0;
	result = NIM_TRUE;
	{
		NIM_BOOL T3_;
		int T4_;
		T3_ = (NIM_BOOL)0;
		T4_ = (int)0;
		T4_ = unlink(nimToCStringConv(file));
		T3_ = !((T4_ == ((NI32) 0)));
		if (!(T3_)) goto LA5_;
		T3_ = !((errno == ENOENT));
		LA5_: ;
		if (!T3_) goto LA6_;
{		result = NIM_FALSE;
}	}
	LA6_: ;
	return result;
}

N_LIB_PRIVATE N_NIMCALL(void, nosremoveFile)(NimStringDesc* file) {
	{
		NIM_BOOL T3_;
		NCSTRING T6_;
		NimStringDesc* T7_;
		T3_ = (NIM_BOOL)0;
		T3_ = nostryRemoveFile(file);
		if (!!(T3_)) goto LA4_;
{		T6_ = (NCSTRING)0;
		T6_ = strerror(errno);
		T7_ = (NimStringDesc*)0;
		T7_ = cstrToNimstr(T6_);
		raiseOSError_bEwAamo1N7TKcaU9akpiyIg(osLastError_tNPXXFl9cb3BG0pJKzUn9bew(), T7_);
}	}
	LA4_: ;
}

N_LIB_PRIVATE N_NIMCALL(void, nosmoveFile)(NimStringDesc* source, NimStringDesc* dest) {
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = tryMoveFSObject_kAUHL0UShtIjkMl3w2BG3A(source, dest);
		if (!!(T3_)) goto LA4_;
{		noscopyFile(source, dest);
		try {
			nosremoveFile(source);
		}
		catch (...) {
			nostryRemoveFile(dest);
			throw;
		}
}	}
	LA4_: ;
}
N_LIB_PRIVATE N_NIMCALL(void, stdlib_osInit000)(void) {
{
	TFrame FR_; FR_.len = 0;
}
}

N_LIB_PRIVATE N_NIMCALL(void, stdlib_osDatInit000)(void) {
}

