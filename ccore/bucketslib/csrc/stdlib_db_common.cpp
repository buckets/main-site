/* Generated by Nim Compiler v0.19.1 */
/*   (c) 2018 Andreas Rumpf */
/* The generated code is subject to the original license. */
#define NIM_NEW_MANGLING_RULES
#define NIM_INTBITS 64

#include "nimbase.h"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct TNimType;
struct TNimNode;
struct tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ;
struct tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw;
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA;
struct Exception;
struct RootObj;
struct NimStringDesc;
struct TGenericSeq;
struct tySequence_uB9b75OUPRENsBAu4AnoePA;
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA;
typedef NU8 tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A;
typedef NU8 tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ;
typedef N_NIMCALL_PTR(void, tyProc_ojoeKfW4VYIm36I9cpDTQIg) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ) (void* p);
struct TNimType {
NI size;
tyEnum_TNimKind_jIBKr1ejBgsfM33Kxw4j7A kind;
tySet_tyEnum_TNimTypeFlag_v8QUszD1sWlSIWZz7mC4bQ flags;
TNimType* base;
TNimNode* node;
void* finalizer;
tyProc_ojoeKfW4VYIm36I9cpDTQIg marker;
tyProc_WSm2xU5ARYv9aAR4l0z9c9auQ deepcopy;
};
typedef NU8 tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ;
struct TNimNode {
tyEnum_TNimNodeKind_unfNsxrcATrufDZmpBq4HQ kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
struct RootObj {
TNimType* m_type;
};
struct TGenericSeq {
NI len;
NI reserved;
};
typedef NIM_CHAR tyUncheckedArray_py3s8sMDoAoBkn8uuh0ZzQ[1];
struct NimStringDesc : public TGenericSeq {
tyUncheckedArray_py3s8sMDoAoBkn8uuh0ZzQ data;
};
N_NIMCALL(void, popCurrentExceptionEx)(NU id);struct Exception : public RootObj {
virtual void raise() {throw *this;}
~Exception() {if(this->raise_id) popCurrentExceptionEx(this->raise_id);}
Exception* parent;
NCSTRING name;
NimStringDesc* message;
tySequence_uB9b75OUPRENsBAu4AnoePA* trace;
NU raise_id;
Exception* up;
};
struct tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA : public Exception {
virtual void raise() {throw *this;}
};
struct tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw : public tyObject_CatchableError_qrLSDoe2oBoAqNtJ9badtnA {
virtual void raise() {throw *this;}
};
struct tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ : public tyObject_IOError_iLZrPn9anoh9ad1MmO0RczFw {
virtual void raise() {throw *this;}
};
struct tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA {
NCSTRING procname;
NI line;
NCSTRING filename;
};
struct tySequence_uB9b75OUPRENsBAu4AnoePA : TGenericSeq {
  tyObject_StackTraceEntry_oLyohQ7O2XOvGnflOss8EA data[SEQ_DECL_SIZE];
};
N_NIMCALL(void, nimGCvisit)(void* d, NI op);
static N_NIMCALL(void, Marker_tyRef_ZVbaMVrRDW1Cj9bby6YsVhA)(void* p, NI op);
extern TNimType NTI_iLZrPn9anoh9ad1MmO0RczFw_;
TNimType NTI_9cp8FUMATyqFmLaAKCXEjCQ_;
TNimType NTI_ZVbaMVrRDW1Cj9bby6YsVhA_;
static N_NIMCALL(void, Marker_tyRef_ZVbaMVrRDW1Cj9bby6YsVhA)(void* p, NI op) {
	tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ* a;
	a = (tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
	nimGCvisit((void*)(*a).up, op);
}
N_LIB_PRIVATE N_NIMCALL(void, stdlib_db_commonInit000)(void) {
{
	TFrame FR_; FR_.len = 0;
}
}

N_LIB_PRIVATE N_NIMCALL(void, stdlib_db_commonDatInit000)(void) {
static TNimNode TM_roPg9aXsZrBZMcw9a0dVfzaQ_0[1];
NTI_9cp8FUMATyqFmLaAKCXEjCQ_.size = sizeof(tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ);
NTI_9cp8FUMATyqFmLaAKCXEjCQ_.kind = 17;
NTI_9cp8FUMATyqFmLaAKCXEjCQ_.base = (&NTI_iLZrPn9anoh9ad1MmO0RczFw_);
TM_roPg9aXsZrBZMcw9a0dVfzaQ_0[0].len = 0; TM_roPg9aXsZrBZMcw9a0dVfzaQ_0[0].kind = 2;
NTI_9cp8FUMATyqFmLaAKCXEjCQ_.node = &TM_roPg9aXsZrBZMcw9a0dVfzaQ_0[0];
NTI_ZVbaMVrRDW1Cj9bby6YsVhA_.size = sizeof(tyObject_DbError_9cp8FUMATyqFmLaAKCXEjCQ*);
NTI_ZVbaMVrRDW1Cj9bby6YsVhA_.kind = 22;
NTI_ZVbaMVrRDW1Cj9bby6YsVhA_.base = (&NTI_9cp8FUMATyqFmLaAKCXEjCQ_);
NTI_ZVbaMVrRDW1Cj9bby6YsVhA_.marker = Marker_tyRef_ZVbaMVrRDW1Cj9bby6YsVhA;
}

